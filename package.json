{
  "name": "graphql_prisma_backend_boilerplate",
  "version": "1.0.0",
  "description": "graphql_prisma_backend_boilerplate",
  "main": "index.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/tylim88/Graphql-Prisma-BackEnd-Boilerplate.git"
  },
  "scripts": {
    "jest": "jest --watch --runInBand",
    "jest-ci": "jest --runInBand",
    "start": "npm run build && node dist/index.js",
    "build": "babel src --out-dir dist --copy-files",
    "docker-build": "docker-compose build",
    "docker-up": "docker-compose up -d",
    "deploy": "prisma deploy",
    "token": "prisma token",
    "get-schema": "prisma generate",
    "docker-volume": "cross-env-shell \"docker volume create $DOCKER_VOLUME\"",
    "docker-down": "docker-compose down",
    "playground": "cross-env-shell \"./node_modules/.bin/opn $NODE_ENDPOINT\"",
    "wait-server": "cross-env-shell \"sleep 5\"",
    "separator": "-------------------------------------------------------prod------------------------------------------------------------------------",
    "prod-setup": "env-cmd ./.config/prod.env npm run docker-volume && env-cmd ./.config/prod.env npm run docker-build && node ./terminalString/dev.js",
    "prod-start": "npm run wait-server && npm run prod-deploy && env-cmd ./.config/prod.env npm run start",
    "prod-deploy": "env-cmd ./.config/prod.env npm run deploy && npm run dev-get-schema",
    "prod-token": "env-cmd ./.config/prod.env npm run token",
    "prod-get-schema": "env-cmd ./.config/prod.env prisma generate",
    "prod-docker-up": "env-cmd ./.config/prod.env npm run docker-up",
    "prod-docker-down": "env-cmd ./.config/prod.env npm run docker-down",
    "separator-1": "---------------------------------------------------test---------------------------------------------------------------------------",
    "test-setup": "env-cmd ./.config/test.env npm run docker-volume && env-cmd ./.config/test.env npm run docker-build && npm run test-docker-up && node ./terminalString/test.js && cross-env-shell \"sleep 12\" && env-cmd ./.config/test.env npm run playground",
    "test-start": "npm run wait-server && npm run test-deploy && env-cmd ./.config/test.env npm run start",
    "test-deploy": "env-cmd ./.config/test.env npm run deploy && npm run test-get-schema",
    "test-token": "env-cmd ./.config/test.env npm run token",
    "test-get-schema": "env-cmd ./.config/test.env prisma generate",
    "test-docker-up": "env-cmd ./.config/test.env npm run docker-up",
    "test-docker-down": "env-cmd ./.config/test.env npm run docker-down",
    "separator-2": "--------------------------------------------------dev-----------------------------------------------------------------------------",
    "dev-setup": "env-cmd ./.config/dev.env npm run docker-volume && env-cmd ./.config/dev.env docker-compose -f ./docker-compose-dev.yml build && npm run dev-docker-up && npm run dev-deploy && concurrently \"npm run dev-start\" \"npm run dev-browse\"",
    "dev-start": "env-cmd ./.config/dev.env npm start",
    "dev-browse": "npm run wait-server && node ./terminalString/dev.js && cross-env-shell \"sleep 3\" && env-cmd ./.config/dev.env npm run playground",
    "dev-jest": "env-cmd ./.config/dev.env npm run jest",
    "dev-nodemon": "env-cmd ./.config/dev.env nodemon src/index.js --ext js,graphql --exec babel-node",
    "dev-deploy": "env-cmd ./.config/dev.env npm run deploy && npm run dev-get-schema",
    "dev-token": "env-cmd ./.config/dev.env npm run token",
    "dev-get-schema": "env-cmd ./.config/dev.env prisma generate",
    "dev-docker-up": "env-cmd ./.config/dev.env docker-compose -f ./docker-compose-dev.yml up -d",
    "dev-docker-down": "env-cmd ./.config/dev.env npm run docker-down"
  },
  "jest": {
    "globalSetup": "./tests/jest/globalSetup.js",
    "globalTeardown": "./tests/jest/globalTeardown.js"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "@babel/polyfill": "^7.0.0",
    "apollo-boost": "^0.1.21",
    "apollo-cache-inmemory": "^1.3.10",
    "apollo-client": "^2.4.6",
    "apollo-link": "^1.2.3",
    "apollo-link-error": "^1.1.1",
    "apollo-link-http": "^1.5.5",
    "apollo-link-ws": "^1.0.9",
    "apollo-utilities": "^1.0.25",
    "bcrypt": "^3.0.2",
    "cross-fetch": "^2.2.3",
    "graphql": "^0.13.2",
    "graphql-yoga": "^1.16.7",
    "jsonwebtoken": "^8.4.0",
    "prisma-binding": "^2.2.1",
    "subscriptions-transport-ws": "^0.9.15"
  },
  "devDependencies": {
    "@babel/cli": "^7.1.5",
    "@babel/core": "^7.1.6",
    "@babel/node": "^7.0.0",
    "@babel/preset-env": "^7.1.6",
    "@babel/register": "^7.0.0",
    "babel-core": "^7.0.0-bridge.0",
    "concurrently": "^4.1.0",
    "cross-env": "^5.2.0",
    "env-cmd": "^8.0.2",
    "husky": "^1.1.4",
    "jest": "^23.6.0",
    "nodemon": "^1.18.6",
    "opn-cli": "^4.0.0",
    "prettier": "^1.15.2",
    "pretty-quick": "^1.8.0",
    "prisma": "^1.20.7"
  },
  "babel": {
    "presets": [
      "@babel/preset-env"
    ]
  },
  "prettier": {
    "eslintIntegration": true,
    "singleQuote": true,
    "jsxSingleQuote": true,
    "trailingComma": "es5",
    "semi": false,
    "arrowParens": "always"
  },
  "husky": {
    "hooks": {
      "pre-commit": "pretty-quick --staged"
    }
  }
}
